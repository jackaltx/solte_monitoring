---
name: CI

on:
  push:
    branches: [main, master]
    paths:
      - 'roles/**'
      - 'molecule/**'
      - '.github/**'
    # paths-ignore:
    #   - "**.md"
  pull_request:
    branches: [main, master]
    paths:
      - 'roles/**'
      - 'molecule/**'
    # paths-ignore:
    #   - "**.md"
  # Allow manual trigger on any branch (including dev)
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run tests on'
        required: true
        default: '*'

env:
  DEBUG_MODE: save   # OR none OR interactive
  MOLECULE_NO_LOG: false
  PY_COLORS: 1
  ANSIBLE_FORCE_COLOR: 1

jobs:
  molecule:
    name: Molecule
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      # matrix:
      #   distro:
      #     - debian12
      #     # - rocky9
      #     # - ubuntu24

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check out wiki repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          path: main/.wiki
          token: ${{ secrets.WIKI_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Pull Docker images
        run: |
          docker pull ghcr.io/jackaltx/testing-containers/debian12-ssh:latest
          docker pull ghcr.io/jackaltx/testing-containers/rocky93-ssh:latest
          docker pull ghcr.io/jackaltx/testing-containers/ubuntu24-ssh:latest

      # claude:  should we pass this in as an array.  my lab will have single-board-computer clusters. I may want to do ARM64
      - name: Create required directories
        run: |
          mkdir -p log
          mkdir -p verify_output/{debian,rocky}
          chmod 755 log verify_output verify_output/{debian,rocky}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            ansible-core==2.18.1 \
            molecule==24.12.0 \
            molecule-plugins==23.5.3 \
            ansible-lint==24.12.1 \
            yamllint==1.35.1 \
            docker \
            jmespath

      # .......................................................................
      # TODO: does it make sense to read the local requirements?  
      - name: Install galaxy requirements
        run: |
          ansible-galaxy collection install community.general

      # .......................................................................
      - name: Run Molecule tests with wiki update
        run: molecule test -s github
        continue-on-error: ${{ env.DEBUG_MODE != 'none' }}
        env:
          LOG_DURATION: "5m"
          GITHUB_WORKSPACE: ${{ github.workspace }}/main
          MOLECULE_DISTRO: ${{ matrix.distro }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}

      #######################################################################
      # Debugging steps

      # ......................................................................
      # Save container artifact approach
      - name: Save failed container
        if: |
          failure() && 
          env.DEBUG_MODE == 'save'
        run: |
          CONTAINER_ID=$(docker ps -a | grep rocky | awk '{print $1}')
          echo "Container ID: $CONTAINER_ID"
          docker commit $CONTAINER_ID debug-rocky-container
          docker save debug-rocky-container > rocky-debug.tar

      - name: Upload failed container artifact
        if: |
          failure() && 
          env.DEBUG_MODE == 'save'
        uses: actions/upload-artifact@v4
        with:
          name: rocky-debug-container
          path: rocky-debug.tar

      # ......................................................................
      # Interactive debugging approach
      - name: Interactive Debug Session
        if: |
          failure() && 
          env.DEBUG_MODE == 'interactive'
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

      #
      #######################################################################

      # .......................................................................
      # Optional: Comment on PR with status URL
      # - name: Comment PR
      #   if: github.event_name == 'pull_request' && success()
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const statusUrl = fs.readFileSync('verify_output/status_url.txt', 'utf8');
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: `âœ… Monitoring stack verification complete. View status: ${statusUrl}`
      #       });

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: monitoring-test-results
          path: verify_output
          if-no-files-found: error

      # Only run wiki update on push to main/master
      - name: Configure wiki git
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        working-directory: main/.wiki
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Push wiki changes
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        working-directory: main/.wiki
        run: |
          git add .
          git diff --staged --quiet || git commit -m "Update test results from CI run"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.WIKI_TOKEN }}
