---
name: CI

on:
  push:
    branches: [main, master]
    paths:
      - 'roles/**'
      - 'molecule/**'
      - '.github/**'
    # paths-ignore:
    #   - "**.md"
  pull_request:
    branches: [main, master]
    paths:
      - 'roles/**'
      - 'molecule/**'
    # paths-ignore:
    #   - "**.md"
  # Allow manual trigger on any branch (including dev)
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run tests on'
        required: true
        default: '*'


# ...............................................................
#  SMELL I have not had much luck with vars in here.  revisit it later.
#      
env:
  DEBUG_MODE: save   # OR none OR interactive
  MOLECULE_NO_LOG: false
  PY_COLORS: 1
  ANSIBLE_FORCE_COLOR: 1

# ...............................................................
# this where github-ci gets it's "steps"
# things to know
# - env vars is how you pass information into the molecule.  
# - use playbooks to pass those into the ansible tasks/roles/modules
# - There is a test matrix capability, but allowing molecule 
#     to build the tests works better
# - the stage playbooks apply to all works, but it's far from elegant
# - You can put env vars in a step,  note that I do that for the molecule
#     
#
jobs:
  molecule:
    name: Molecule
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    env:
      DEBUG_MODE: save

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check out wiki repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          path: main/.wiki
          token: ${{ secrets.WIKI_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Pull Docker images
        run: |
          docker pull ghcr.io/jackaltx/testing-containers/debian12-ssh:latest

        # docker pull ghcr.io/jackaltx/testing-containers/rocky93-ssh:latest
        # docker pull ghcr.io/jackaltx/testing-containers/ubuntu24-ssh:latest

      # claude:  should we pass this in as an array.  my lab will have single-board-computer clusters. I may want to do ARM64
      - name: Create required directories
        run: |
          mkdir -p log
          mkdir -p verify_output/{debian,rocky}
          chmod 755 log verify_output verify_output/{debian,rocky}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            ansible-core==2.18.1 \
            molecule==24.12.0 \
            molecule-plugins==23.5.3 \
            ansible-lint==24.12.1 \
            yamllint==1.35.1 \
            docker \
            jmespath

      # ......................................................................
      - name: Debug GitHub context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repo: ${{ github.repository }}"
          echo "Workspace: ${{ github.workspace }}"

      # .......................................................................
      # TODO: This feels wrong....it works.  
      # I would it make sense to read the local project requirements? 
      # I need to understand how that works locally as a developers machine is
      # rarely a good test of an integration
      # 
      - name: Install galaxy requirements
        run: |
          ansible-galaxy collection install community.general

      # .......................................................................
      # TODO:  move the wiki update logit a run step
      # this is a github only action.  I want to create a "wiki page" and a "notice" where required
      - name: Run Molecule tests with wiki update
        run: molecule test -s github
        continue-on-error: ${{ env.DEBUG_MODE != 'none' }}
        env:
          IN_GITHUB_CI: true
          LOG_DURATION: "5m"
          GITHUB_WORKSPACE: ${{ github.workspace }}/main
          MOLECULE_DISTRO: ${{ matrix.distro }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}

      # ......................................................................
      # Save container artifact approach
      # SMELL TODO  make this generic
      # SMELL this this is two if's that should be a block. ;(
      # 
      - name: Save failed containers
        if: ${{ failure() }} && ${{ env.DEBUG_MODE == 'save' }}
        run: |
          echo "=== Currently running podman containers ==="
          podman ps -a

          for os in uut-ct0 uut-ct1 uut-ct2 ; do
            CONTAINER_ID=$(docker ps -a | grep $os | awk '{print $1}')
            if [ -n "$CONTAINER_ID" ]; then
              echo "Saving $os container: $CONTAINER_ID"
              docker commit $CONTAINER_ID debug-$os-container
              docker save debug-$os-container > $os-debug.tar
            fi
          done
    
      - name: Upload failed container artifacts
        if: ${{ failure() }} && ${{ env.DEBUG_MODE == 'save' }}
        uses: actions/upload-artifact@v4
        with:
          name: debug-containers
          path: |
            uut-ct0-debug.tar
            
          # rocky-debug.tar
          # ubuntu-debug.tar

      # ......................................................................
      #  This will block the rest if there are no artifacts!
      #  If molecule fails, then it is possible to have no artifacts
      #
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: monitoring-test-results
          path: verify_output
          if-no-files-found: error
  
      # SMELL only if we passed?????
      #
      #######################################################################
      #
      #... Reporting stuff,  wiki and gist and discord and ....

      # .......................................................................
      # Optional: Comment on PR with status URL
      # - name: Comment PR
      #   if: github.event_name == 'pull_request' && success()
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const statusUrl = fs.readFileSync('verify_output/status_url.txt', 'utf8');
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: `âœ… Monitoring stack verification complete. View status: ${statusUrl}`
      #       });

      # Only run wiki update on push to main/master
      - name: Configure wiki git
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        working-directory: main/.wiki
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Push wiki changes
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        working-directory: main/.wiki
        run: |
          git add .
          git diff --staged --quiet || git commit -m "Update test results from CI run"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.WIKI_TOKEN }}
