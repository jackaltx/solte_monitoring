---
name: CI

on:
  push:
    branches: [main, master]
    paths:
      - 'roles/**'
      - 'molecule/**'
      - '.github/**'
    # paths-ignore:
    #   - "**.md"
  pull_request:
    branches: [main, master]
    paths:
      - 'roles/**'
      - 'molecule/**'
    # paths-ignore:
    #   - "**.md"
  # Allow manual trigger on any branch (including dev)
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run tests on'
        required: true
        default: '*'


# ...............................................................
#  SMELL I have not had much luck with vars in here.  revisit it later.
#      
env:
  DEBUG_MODE: save   # OR none OR interactive
  MOLECULE_NO_LOG: false
  PY_COLORS: 1
  ANSIBLE_FORCE_COLOR: 1

# ...............................................................
# this where github-ci gets it's "steps"
# things to know
# - env vars is how you pass information into the molecule.  
# - use playbooks to pass those into the ansible tasks/roles/modules
# - There is a test matrix capability, but allowing molecule 
#     to build the tests works better
# - the stage playbooks apply to all works, but it's far from elegant
# - You can put env vars in a step,  note that I do that for the molecule
#     
#
jobs:
  molecule:
    name: Molecule
    runs-on: ubuntu-20.04
    timeout-minutes: 60  # Add timeout protection
    strategy:
      matrix:
        platform: ['uut-ct0', 'uut-ct1']  # , 'uut-ct2']
      fail-fast: false
      max-parallel: 1  # Ensure we don't overwhelm resources
    env:
      MOLECULE_PLATFORM_NAME: ${{ matrix.platform }}
      DEBUG_MODE: save   
      MOLECULE_NO_LOG: false
      PY_COLORS: 1
      ANSIBLE_FORCE_COLOR: 1
      # MOLECULE_DESTROY: ${{ github.event_name != 'pull_request' }}  # Keep containers on PR
      ANSIBLE_LOCALHOST_WARNING: false
      MOLECULE_VERIFY_RETRY: 3  # Add retry capability
      MOLECULE_SERIAL: 1
      # IN_GITHUB_CI: true
      # Additional useful vars:
      # ANSIBLE_VERBOSITY: 1                    # Increase ansible verbosity (0-4)
      # MOLECULE_DEBUG: true                    # Enable molecule debug output
      # MOLECULE_EPHEMERAL_DIRECTORY: ../cache  # Control where temporary files go
      # TESTINFRA_INTERACTIVE: false           # Disable interactive mode for testinfra
      # MOLECULE_PODMAN_CMD: /usr/bin/podman   # Explicitly set podman path
      # ANSIBLE_DISPLAY_SKIPPED_HOSTS: false   # Reduce log noise
      # ANSIBLE_DISPLAY_OK_HOSTS: false        # Reduce log noise further
      # ANSIBLE_RETRY_FILES_ENABLED: false     # Prevent retry file creation
      # PODMAN_MEMORY_RESERVATION: 512m        # Control container memory

    steps:

      - name: Check out code
        uses: actions/checkout@v4

      - name: Check out wiki repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          path: main/.wiki
          token: ${{ secrets.WIKI_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
 
      # .......................................................................
      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman crun
          # Configure podman to use crun instead of runc
          sudo mkdir -p /etc/containers
          echo '[engine]
          runtime = "crun"' | sudo tee /etc/containers/containers.conf
          # Set up required directories for systemd containers
          sudo mkdir -p /etc/systemd/system
          sudo mkdir -p /run/systemd/system
          # used for testing
          sudo apt-get install -y tree


      # .......................................................................
      - name: Configure podman storage
        run: |
          echo '[storage]
          driver = "vfs"
          runroot = "/run/containers/storage"
          graphroot = "/var/lib/containers/storage"' | sudo tee /etc/containers/storage.conf

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache podman images
        uses: actions/cache@v4
        with:
          path: ~/.local/share/containers/storage
          key: podman-images-${{ matrix.platform }}-${{ hashFiles('molecule/*/molecule.yml') }}
          restore-keys: |
            podman-images-${{ matrix.platform }}-
            podman-images-

      - name: Pull container images
        run: |
          case ${{ matrix.platform }} in
            uut-ct0)
              podman pull ghcr.io/jackaltx/testing-containers/debian12-ssh:latest
              ;;
            uut-ct1)
              podman pull ghcr.io/jackaltx/testing-containers/rocky93-ssh:latest
              ;;
          esac

        # podman pull ghcr.io/jackaltx/testing-containers/ubuntu24-ssh:latest

      # ......................................................................
      - name: Debug GitHub context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repo: ${{ github.repository }}"
          echo "Workspace: ${{ github.workspace }}"


      # .......................................................................
      - name: Create ansible/molecule directories
        run: |
          mkdir -p log

      # .......................................................................
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            ansible-core==2.18.1 \
            molecule==24.12.0 \
            molecule-plugins==23.5.3 \
            ansible-lint==24.12.1 \
            yamllint==1.35.1 \
            podman \
            jmespath \
            molecule[podman]  # Add this for podman support

      # .......................................................................
      # TODO: This feels wrong....it works.  
      # I would it make sense to read the local project requirements? 
      # I need to understand how that works locally as a developers machine is
      # rarely a good test of an integration
      # 
      - name: Install galaxy requirements
        run: |
          ansible-galaxy collection install community.general

      # .......................................................................
      # TODO:  move the wiki update logit a run step
      # this is a github only action.  I want to create a "wiki page" and a "notice" where required
      #
      - name: Run Molecule tests across all distros
        run: molecule test -s github
        continue-on-error: ${{ env.DEBUG_MODE != 'none' }}
        env:
          IN_GITHUB_CI: true
          LOG_DURATION: "5m"
          GITHUB_WORKSPACE: ${{ github.workspace }}/main
          MOLECULE_DISTRO: ${{ matrix.distro }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}

      # .......................................................................
      # .......................................................................
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-test-results
          path: verify_output
          retention-days: 5  # Limit storage usage
          if-no-files-found: warn

 
      # .......................................................................
      # .......................................................................
      - name: Aggregate and publish results
        if: always()  # Run even if molecule tests fail
        env:
          GH_TOKEN: ${{ secrets.GIST_TOKEN }}  # Missing auth token
        run: |
          echo "Processing test results..."
          
          # First handle individual distribution gists
          for distro in verify_output/*/; do
            if [ -f "${distro}/gist-content.md" ]; then
              distro_name=$(basename $distro)
              echo "Processing ${distro_name} results..."
              
              # Append git/build context to gist
              {
                echo "## Build Context"
                echo "- Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                echo "- Branch: ${{ github.ref_name }}"
                echo "- Commit: ${{ github.sha }}"
                echo "- Triggered by: ${{ github.event_name }}"
              } >> "${distro}/gist-content.md"
              
              # Create/update gist for this distro
              if ! gh gist create "${distro}/gist-content.md" \
                --public \
                --desc "Test Results for ${distro_name} (${GITHUB_SHA:0:7})"; then
                echo "Failed to create gist for ${distro_name}"
                exit 1
              fi
            else
              echo "Warning: No gist content found for ${distro_name}"
            fi
          done

      # --------------------------------------------------------------------------------------------
      # --------------------------------------------------------------------------------------------
      - name: Create job summary
        if: always()
        run: |
          {
            echo "# Test Run Summary"
            echo "- Status: success"
            echo "- Duration: "
            echo "## Distribution Results"
            for d in verify_output/*/; do
              distro_name=$(basename $d)
              echo -n "- ${distro_name}: "
              if [ -f "${d}/gist-content.md" ] && [ -f "${d}/wiki-content.md" ]; then
                echo "✅"
                echo "  - Gist Content: ✓"
                echo "  - Wiki Content: ✓"
              else
                echo "❌"
                [ -f "${d}/gist-content.md" ] && echo "  - Gist Content: ✓" || echo "  - Gist Content: ✗"
                [ -f "${d}/wiki-content.md" ] && echo "  - Wiki Content: ✓" || echo "  - Wiki Content: ✗"
              fi
            done
            
            echo "## File Structure"
            tree verify_output/
          } >> $GITHUB_STEP_SUMMARY