---
- name: Verify
  hosts: "{{ lookup('env', 'MOLECULE_PLATFORM_NAME', default='all') }}"
  become: true
  serial: "{{ lookup('env', 'MOLECULE_SERIAL', default='0') }}"

  vars:
    # Only check container and network health
    check_services: false
    molecule_nolog: true
    verify_timestamp: "{{ ansible_date_time.iso8601 }}"
    on_github: "{{ lookup('env', 'IN_GITHUB_CI', default=false) }}"

  tasks:
    #
    # .....................................................................
    #
    - name: Ensure verify_output directory exists
      ansible.builtin.file:
        path: "{{ report_root }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      become: false

    # .....................................................................
    - name: Debug information
      debug:
        msg:
          - "GithubCi: {{ on_github }}"
          - "Playbook dir: {{ playbook_dir }}"
          - "Roles path: {{ playbook_dir }}/../../roles"
          - "Project_root: {{ project_root }}"
          - "Distribution: {{ ansible_distribution }}"
          - "Testing capability: {{ testing_capabilities }}"

    # ................................................................
    # note this has to be loaded in each phase playbook!
    # This sets monitoring_capabilities variable. This is a hard-coded for now
    - name: Load capability role definitions
      include_vars:
        file: "{{ project_root }}/molecule/shared/vars/capabilities.yml"

    # .......................................................................
    - name: Run container diagnostics
      ansible.builtin.include_tasks:
        file: "{{ project_root }}/molecule/shared/diagnostics/main.yml"
      vars:
        report_suffix: "preverify"

    # ................................................................
    # I am assuming that this fact will be used  to store all the output results
    # in an addressable way.
    # like  verify_results.logs.tests[0].results
    # and verify_results.metrics.tests[0].results
    # and something like that for the error reports    #
    #
    - name: Initialize result for capability
      set_fact:
        "verify_results": {}

    # .......................................................................
    # Version 2
    #
    # This is a nested loop that iterates over the testing_capabilities
    # The inner loop is a short included script to loop over a list of test tasks
    #
    - name: Run capability-specific verifications
      loop: "{{ testing_capabilities }}"
      include_tasks: verify-capability.yml
      loop_control:
        loop_var: capability
        label: "Verifying {{ capability }} capability"

    # .......................................................................
    # Version 1 (deprecated)
    # - name: Run capability-specific verifications (Version 1)
    #   include_tasks: "verify-{{ capability }}.yml"
    #   loop: "{{ testing_capabilities }}"
    #   loop_control:
    #     loop_var: capability
    #     label: "Verifying {{ capability }} capability"

    # .......................................................................
    # this need to change. we want to loop over all the capabilites and tests for errors.
    - name: Create verification status map
      set_fact:
        verification_status: >-
          {{
            verification_status | default({}) | combine(
              { capability: hostvars[inventory_hostname][capability + '_verify_failed'] | default(false) }
            )
          }}
      loop: "{{ testing_capabilities }}"
      loop_control:
        loop_var: capability

    # .......................................................................
    - name: Final verification check
      fail:
        msg: "Verifications failed: {{ verification_status | dict2items | selectattr('value', 'true') | map(attribute='key') | list | join(', ') }}"
      when: verification_status.values() | list | select('true') | list | length > 0

    # .......................................................................
    - name: Run Gitlab CI only tasks
      when: on_github
      ansible.builtin.include_tasks: "verify-github.yml"
