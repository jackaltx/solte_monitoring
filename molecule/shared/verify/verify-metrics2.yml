---
# Verify metrics system while building knowledge base contribution
# Facts set by this task:
# - verify_master_report: master report dictionary containing all test data
# - metrics_verify_failed: boolean indicating if verification failed

- name: Verify metrics system components
  block:
    # Initialize or update master report for this run
    - name: Ensure master report exists with metadata
      set_fact:
        verify_master_report: >-
          {{
            verify_master_report | default({}) | combine({
              'metadata': {
                'timestamp': verify_timestamp,
                'distribution': ansible_distribution | lower,
                'molecule_scenario': lookup('env', 'MOLECULE_SCENARIO_NAME'),
                'run_id': ansible_date_time.epoch
              }
            }, recursive=true)
          }}

    # Initialize metrics section of report
    - name: Initialize metrics verification section
      set_fact:
        verify_master_report: >-
          {{
            verify_master_report | combine({
              'capabilities': verify_master_report.capabilities | default({}) | combine({
                'metrics': {
                  'start_time': ansible_date_time.iso8601,
                  'components': ['influxdb', 'telegraf'],
                  'checks': {},
                  'patterns': {},
                  'timing': {}
                }
              }, recursive=true)
            }, recursive=true)
          }}

    # Service Checks
    - name: Record service check start time
      set_fact:
        service_check_start: "{{ ansible_date_time.epoch }}"

    - name: Check service statuses
      ansible.builtin.service_facts:

    - name: Record service states
      set_fact:
        verify_master_report: >-
          {{
            verify_master_report | combine({
              'capabilities': {
                'metrics': {
                  'checks': {
                    'services': {
                      'influxdb': {
                        'state': ansible_facts.services['influxdb.service'].state,
                        'status': ansible_facts.services['influxdb.service'].status,
                        'runtime': ansible_date_time.epoch | int - service_check_start | int
                      },
                      'telegraf': {
                        'state': ansible_facts.services['telegraf.service'].state,
                        'status': ansible_facts.services['telegraf.service'].status
                      }
                    }
                  }
                }
              }
            }, recursive=true)
          }}

    # Network Checks
    - name: Verify InfluxDB port
      ansible.builtin.wait_for:
        port: 8086
        timeout: 30
        state: started
      register: port_check
      ignore_errors: true

    - name: Check Telegraf connection
      ansible.builtin.shell: "ss -tunp | grep ':8086.*telegraf'"
      register: connection_check
      changed_when: false
      failed_when: false

    - name: Record connectivity results
      set_fact:
        verify_master_report: >-
          {{
            verify_master_report | combine({
              'capabilities': {
                'metrics': {
                  'checks': {
                    'connectivity': {
                      'port_status': not port_check.failed | default(true),
                      'telegraf_connected': connection_check.stdout | length > 0,
                      'connection_count': connection_check.stdout_lines | length
                    }
                  }
                }
              }
            }, recursive=true)
          }}

    # Data Flow Checks
    - name: Test write capability
      ansible.builtin.command: >
        influx write --bucket telegraf --precision s 
        "test,tag=molecule value=1"
      register: write_check
      changed_when: false
      ignore_errors: true

    - name: Test query capability
      ansible.builtin.command: >
        influx query 'from(bucket:"telegraf")
        |> range(start: -1m)
        |> filter(fn: (r) => r["_measurement"] == "test")'
      register: query_check
      changed_when: false
      ignore_errors: true

    - name: Record data flow results
      set_fact:
        verify_master_report: >-
          {{
            verify_master_report | combine({
              'capabilities': {
                'metrics': {
                  'checks': {
                    'data_flow': {
                      'write_success': write_check.rc == 0,
                      'query_success': query_check.rc == 0,
                      'write_latency': write_check.delta | default(0),
                      'query_latency': query_check.delta | default(0)
                    }
                  }
                }
              }
            }, recursive=true)
          }}

    # Error Analysis
    - name: Check for errors in logs
      ansible.builtin.shell: |
        journalctl -u {{ item }} --since "5 minutes ago" -p err
      register: error_logs
      changed_when: false
      failed_when: false
      loop:
        - influxdb
        - telegraf

    - name: Analyze and record error patterns
      set_fact:
        verify_master_report: >-
          {{
            verify_master_report | combine({
              'capabilities': {
                'metrics': {
                  'patterns': {
                    'errors': error_logs.results | map(attribute='stdout_lines') | list,
                    'error_count': error_logs.results | map(attribute='stdout_lines') | map('length') | sum
                  }
                }
              }
            }, recursive=true)
          }}

    # Determine verification status
    - name: Set verification status
      set_fact:
        verify_master_report: >-
          {{
            verify_master_report | combine({
              'capabilities': {
                'metrics': {
                  'verification_status': 'failed' if (
                    verify_master_report.capabilities.metrics.checks.services.influxdb.state != 'running' or
                    verify_master_report.capabilities.metrics.checks.services.telegraf.state != 'running' or
                    not verify_master_report.capabilities.metrics.checks.connectivity.port_status or
                    not verify_master_report.capabilities.metrics.checks.data_flow.write_success or
                    not verify_master_report.capabilities.metrics.checks.data_flow.query_success
                  ) else 'success',
                  'end_time': ansible_date_time.iso8601,
                  'duration': (ansible_date_time.epoch | int - service_check_start | int)
                }
              }
            }, recursive=true)
          }}
        metrics_verify_failed: "{{ verify_master_report.capabilities.metrics.verification_status == 'failed' }}"

    # Save report for this run
    - name: Save verification report
      delegate_to: localhost
      ansible.builtin.copy:
        content: "{{ verify_master_report | to_nice_yaml }}"
        dest: "{{ report_root }}/{{ ansible_distribution | lower }}/master-report-{{ ansible_date_time.epoch }}-2.yml"
        mode: "{{ report_file_mode | default('0644') }}"

  rescue:
    # Record failure state
    - name: Record failure in master report
      set_fact:
        verify_master_report: >-
          {{
            verify_master_report | combine({
              'capabilities': {
                'metrics': {
                  'verification_status': 'failed',
                  'failure_point': ansible_failed_task.name | default('unknown'),
                  'failure_details': ansible_failed_result | default(dict()),
                  'end_time': ansible_date_time.iso8601,
                  'duration': (ansible_date_time.epoch | int - service_check_start | int)
                }
              }
            }, recursive=true)
          }}
        metrics_verify_failed: true

    # Save failure report
    - name: Save failure report
      delegate_to: localhost
      ansible.builtin.copy:
        content: "{{ verify_master_report | to_nice_yaml }}"
        dest: "{{ report_root }}/{{ ansible_distribution | lower }}/master-report-failure-{{ ansible_date_time.epoch }}-2.yml"
        mode: "0644"
