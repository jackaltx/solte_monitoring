---
- name: Verify
  hosts: all
  become: true
  vars:
    # Only check container and network health
    check_services: false
    molecule_nolog: true
    verify_timestamp: "{{ ansible_date_time.iso8601 }}"
    on_github: "{{ lookup('env', 'IN_GITHUB_CI', default=false) }}"

  tasks:
    #
    # .....................................................................
    #
    - name: Ensure verify_output directory exists
      ansible.builtin.file:
        path: "{{ report_root }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      become: false

    # .....................................................................
    - name: Debug information
      debug:
        msg:
          - "GithubCi: {{ on_github }}"
          - "Playbook dir: {{ playbook_dir }}"
          - "Roles path: {{ playbook_dir }}/../../roles"
          - "Project_root: {{ project_root }}"
          - "Distribution: {{ ansible_distribution }}"
          - "Testing capability: {{ testing_capabilities }}"

    # .......................................................................
    - name: Run container diagnostics
      ansible.builtin.include_tasks:
        file: "{{ project_root }}/molecule/shared/diagnostics/tasks/main.yml"
      vars:
        report_suffix: "pre-verify"

    # .......................................................................
    - name: Run capability-specific verifications
      include_tasks: "{{ project_root }}/molecule/shared/verify/verify-{{ capability }}.yml"
      loop: "{{ testing_capabilities }}"
      loop_control:
        loop_var: capability
        label: "Verifying {{ capability }} capability"

    # .......................................................................
    - name: Create verification status map
      set_fact:
        verification_status: >-
          {{
            verification_status | default({}) | combine(
              { capability: hostvars[inventory_hostname][capability + '_verify_failed'] | default(false) }
            )
          }}
      loop: "{{ testing_capabilities }}"
      loop_control:
        loop_var: capability

    # .......................................................................
    - name: Final verification check
      fail:
        msg: "Verifications failed: {{ verification_status | dict2items | selectattr('value', 'true') | map(attribute='key') | list | join(', ') }}"
      when: verification_status.values() | list | select('true') | list | length > 0

    # .......................................................................
    # Github Only
    - name: Github CI block
      when: on_github
      block:
        - name: Collect process information
          shell: "lsof -p $(pidof {{ item }})"
          register: process_info
          loop:
            - influxd
            - telegraf
            - loki
            - alloy
          changed_when: false

        - name: Filter lsof output
          no_log: true
          when: process_info is defined
          set_fact:
            process_filtered: {}
          loop: "{{ process_info.results }}"
          vars:
            filtered_lines: "{{ item.stdout_lines | select('search', '(cwd|rtd|txt|TCP)') | list }}"
          register: filter_results

        # ..................................................................................
        - name: Collect service logs
          command: "journalctl -u {{ item }} --since '5 minutes ago'"
          register: service_logs
          loop:
            - influxdb
            - telegraf
            - loki
            - alloy
          changed_when: false

        # ..................................................................................
        - name: Get Git information
          ansible.builtin.set_fact:
            git_info:
              branch: "{{ lookup('pipe', 'git rev-parse --abbrev-ref HEAD') }}"
              commit: "{{ lookup('pipe', 'git rev-parse HEAD') }}"
              status: "{{ lookup('pipe', 'git status --porcelain') | default('clean', true) }}"

        # ..................................................................................
        #  Save as text file
        #
        - name: Save test results
          ansible.builtin.copy:
            content: |
              === GitHub CI Test Results ===
              Timestamp: influxdb_service_check

              Git Repository Status

              - Branch: {{ git_info.branch }}
              - Commit: {{ git_info.commit }}
              - Status: {{ 'Clean' if not git_info.status else 'Modified' }}

              Process Information:

              {% for item in process_info.results %}
              === {{ item.item }} Processes ===
              {{ item.stdout }}

              {% endfor %}

              Service Logs:

              {% for item in service_logs.results %}
              === {{ item.item }} Logs ===
              {{ item.stdout }}

              {% endfor %}
            dest: "{{ report_root }}/{{ ansible_distribution | lower }}/github_ci_results.txt"
            mode: "0644"
          delegate_to: localhost

        # ..........................................................................................
        - name: Format Gist content
          ansible.builtin.copy:
            content: |
              # Monitoring Stack Status Report
              **Run Date:** {{ status_data.timestamp }}

              ## Environment
              - OS: {{ status_data.environment.os }}
              - Kernel: {{ status_data.environment.kernel }}
              - Python: {{ status_data.environment.python }}

              ## Git Status
              - Branch: {{ status_data.git.branch }}
              - Commit: {{ status_data.git.commit }}
              - Working Tree: {{ 'Clean' if status_data.git.status == 'clean' else 'Modified' }}

              ## Service Status
              | Service  | Status | Port | Listening |
              |----------|--------|------|-----------|
              {% for name, svc in status_data.services.items() %}
              | {{ name | capitalize }} | {{ svc.state }} | {{ svc.port | default('-') }} | {{ 'Yes' if svc.state == 'running' and svc.port else 'N/A' }} |
              {% endfor %}

              ## Data Ingestion
              ### InfluxDB Metrics
              ```
              {{ status_data.data_ingestion.influxdb | trim | indent(2) }}
              ```

              ### Loki Logs
              ```
              {{ status_data.data_ingestion.loki | trim | indent(2) }}
              ```

              ## Service Logs
              {% for item in status_data.logs %}
              ### {{ item.item | upper }}
              {% for line in (item.stdout_lines[-5:] | default([])) %}
              - {{ line }}
              {% endfor %}

              {% endfor %}
            dest: "{{ report_root }}/gist_content.md"
            mode: "0644"
          delegate_to: localhost

        # .......................................................................................
        - name: Format Wiki content
          ansible.builtin.copy:
            content: |
              # Test Results: {{ status_data.timestamp }}

              ## Environment
              - **OS:** {{ status_data.environment.os }}
              - **Kernel:** {{ status_data.environment.kernel }}

              ## Status Summary
              {% for name, svc in status_data.services.items() %}
              - {{ name | capitalize }}: {{ svc.state }}{{ ' (Port ' + svc.port|string + ')' if svc.port }}
              {% endfor %}

              ## Data Collection
              - **InfluxDB:** {{ 'Receiving data' if status_data.data_ingestion.influxdb != 'No data' else 'No data received' }}
              - **Loki:** {{ 'Receiving data' if status_data.data_ingestion.loki != 'No data' else 'No data received' }}

              ## Service Logs

              {% for item in status_data.logs %}
              <details>
              <summary><b>{{ item.item | upper }} Logs</b></summary>

              ```
              {{ item.stdout | trim }}
              ```
              </details>

              {% endfor %}

              ## Process Information

              {% for proc in status_data.processes %}
              <details>
              <summary><b>{{ proc.item | upper }} Processes</b></summary>

              ```
              {{ proc.stdout | trim }}
              ```
              </details>

              {% endfor %}
            dest: "{{ report_root }}/wiki-content.txt"
            mode: "0644"
          delegate_to: localhost
