---
- name: Main tasks
  hosts: all
  gather_facts: true

  tasks:
    # ..................................................................................
    - name: Playbook Prepare connection information
      debug:
        msg:
          - "Running in {{ lookup('env', 'IS_CI') | default('local', true) }} environment"
          - "Running on {{ inventory_hostname }} with IP {{ ansible_host }}"
          - "Ansible host: {{ ansible_host | default('undefined') }}"
          - "Ansible port: {{ ansible_port | default('undefined') }}"
          - "Ansible user: {{ ansible_user | default('undefined') }}"
          - "Connection type: {{ ansible_connection | default('undefined') }}"
      delegate_to: localhost

    # ..................................................................................
    - name: Get basic system info
      setup:
        gather_subset:
          - "!all"
          - "!any"
          - "distribution"
          - "pkg_mgr"

    - name: Debug system info
      debug:
        msg:
          - "Distribution: {{ ansible_distribution }}"
          - "Package Manager: {{ ansible_pkg_mgr }}"

    # ..................................................................................
    - name: Debug Molecule environment vars
      ansible.builtin.debug:
        msg: |
          Debug: {{ item }} = {{ lookup('env', item) }}
      loop:
        - MOLECULE_DEBUG
        - MOLECULE_INSTANCE_NAME
        - MOLECULE_SCENARIO_NAME
        - MOLECULE_FILE
        - MOLECULE_INVENTORY_FILE
        - MOLECULE_DEPENDENCY_NAME
        - MOLECULE_DRIVER_NAME
        - MOLECULE_VERIFIER_NAME
        - MOLECULE_PROVISIONER_NAME
        - MOLECULE_STATE_FILE
        - MOLECULE_EPHEMERAL_DIRECTORY
        - MOLECULE_DIRECTORY
        - MOLECULE_PROJECT_DIRECTORY

    # ..................................................................................
    - name: Prepare Playbook Debug information
      debug:
        msg:
          - "Playbook dir: {{ playbook_dir }}"
          - "Roles path: {{ playbook_dir }}/../../roles"
          - "Project_root: {{ project_root }}"
          - "Distribution: {{ ansible_distribution }}"
          - "Testing capability: {{ testing_capabilities }}"

    - name: Load capability role definitions
      include_vars:
        # file: "../vars/capabilities.yml"
        file: "{{ project_root }}/molecule/shared/vars/capabilities.yml"

    - name: Debug monitoring_capabilities
      debug:
        var: monitoring_capabilities
        verbosity: 1

    # ..................................................................................
    - name: Get required packages for each tested capability
      set_fact:
        combined_required_packages: >-
          {{
            testing_capabilities | 
            map('extract', monitoring_capabilities) |
            map(attribute='required_packages') |
            map(attribute=ansible_os_family) |
            flatten | unique | list
          }}

    # ..................................................................................
    - name: Debug package selection
      debug:
        msg:
          - "Testing Capabilities: {{ testing_capabilities }}"
          - "Required Packages: {{ combined_required_packages }}"
        verbosity: 0

    # ..................................................................................
    - name: Handle Debian/Ubuntu systems
      when: ansible_os_family == "Debian"
      block:
        - name: Install required Debian packages
          apt:
            name: "{{ combined_required_packages }}"
            state: present
            update_cache: yes
          register: pkg_install
          retries: 3
          delay: 10
          until: pkg_install is success
          become: true

    # ..................................................................................
    - name: Handle RedHat systems
      when: ansible_os_family == "RedHat"
      block:
        - name: Install required RedHat packages
          dnf:
            name: "{{ combined_required_packages }}"
            state: present
            update_cache: yes
          register: pkg_install
          retries: 3
          delay: 10
          until: pkg_install is success
          become: true

    # ..................................................................................
    # Test systemd functionality
    - name: Ensure systemd is available
      command: systemctl --version
      changed_when: false
      register: systemd_check

    - name: Show systemd version
      debug:
        var: systemd_check.stdout_lines
        verbosity: 1

    - name: Configure container for systemd operation
      command: systemctl daemon-reexec
      when: systemd_check is success
      become: true

    # ..................................................................................
    - name: Debug systemd environment
      block:
        - name: Check cgroup mounts
          shell: "mount | grep cgroup"
          register: cgroup_mounts
          changed_when: false
          ignore_errors: true

        - name: Check systemd paths
          stat:
            path: "{{ item }}"
          loop:
            - /run/systemd/system
            - /sys/fs/cgroup/systemd
          register: systemd_paths

        - name: Show systemd env debug info
          debug:
            msg:
              - "Cgroup mounts:"
              - "{{ cgroup_mounts.stdout_lines }}"
              - "Systemd paths:"
              - "{{ systemd_paths.results | map(attribute='stat') | list }}"
            verbosity: 1
