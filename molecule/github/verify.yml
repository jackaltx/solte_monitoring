---
- name: Verify
  hosts: all
  become: true
  vars:
    # Only check container and network health
    check_services: false
    on_github: "{{ lookup('env', 'IN_GITHUB_CI', default=false) }}"

  tasks:
    #
    # .....................................................................
    #
    - name: Ensure verify_output directory exists
      ansible.builtin.file:
        path: "{{ report_root }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      become: false

    # .....................................................................
    - name: Debug information
      debug:
        msg:
          - "GithubCi: {{ on_github }}"
          - "Playbook dir: {{ playbook_dir }}"
          - "Roles path: {{ playbook_dir }}/../../roles"
          - "Project_root: {{ project_root }}"
          - "Distribution: {{ ansible_distribution }}"
          - "Testing capability: {{ testing_capabilities }}"

    # .....................................................................
    - name: Run container diagnostics
      ansible.builtin.include_tasks:
        file: "{{ project_root }}/molecule/shared/diagnostics/tasks/main.yml"
      vars:
        report_suffix: "pre-verify"

    # .......................................................................
    - name: Run capability-specific verifications
      include_tasks: "{{ project_root }}/molecule/shared/verify/verify-{{ capability }}.yml"
      loop: "{{ testing_capabilities }}"
      loop_control:
        loop_var: capability
        label: "Verifying {{ capability }} capability"

    # github ONLy AREA

    # ..................................................................................
    # Gather detailed information for report
    #
    - name: Collect process information
      shell: "lsof -p $(pidof {{ item }})"
      register: process_info
      loop:
        - influxd
        - telegraf
        - loki
        - alloy
      changed_when: false

    - name: Filter lsof output
      no_log: true
      when: process_info is defined
      set_fact:
        process_filtered: {}
      loop: "{{ process_info.results }}"
      vars:
        filtered_lines: "{{ item.stdout_lines | select('search', '(cwd|rtd|txt|TCP)') | list }}"
      register: filter_results

    # ..................................................................................
    - name: Collect service logs
      command: "journalctl -u {{ item }} --since '5 minutes ago'"
      register: service_logs
      loop:
        - influxdb
        - telegraf
        - loki
        - alloy
      changed_when: false

    # ..................................................................................
    - name: Get Git information
      set_fact:
        git_info:
          branch: "{{ lookup('pipe', 'git rev-parse --abbrev-ref HEAD') }}"
          commit: "{{ lookup('pipe', 'git rev-parse HEAD') }}"
          status: "{{ lookup('pipe', 'git status --porcelain') | default('clean', true) }}"

    # ..................................................................................
    #  Save as text file
    #
    - name: Save test results
      copy:
        content: |
          === GitHub CI Test Results ===
          Timestamp: {{ ansible_date_time.iso8601 }}

          === Verification Results ===

          {{ logs_test_results }}

          {{ metrics_test_results }}


          Git Repository Status

          - Branch: {{ git_info.branch }}
          - Commit: {{ git_info.commit }}
          - Status: {{ 'Clean' if not git_info.status else 'Modified' }}

          Process Information:


          {% for item in process_info.results %}
          === {{ item.item }} Processes ===
          {{ item.stdout }}

          {% endfor %}

          Service Logs:


          {% for item in service_logs.results %}
          === {{ item.item }} Logs ===
          {{ item.stdout }}

          {% endfor %}
        dest: "{{ report_root }}/{{ ansible_distribution | lower }}/github_ci_results.txt"
        mode: "0644"
      delegate_to: localhost

    # .......................................................................................
    # .......................................................................................
    # Gist and Wiki
    #

    # - name: Create common status data structure
    #   set_fact:
    #     status_data:
    #       timestamp: "{{ ansible_date_time.iso8601 }}"
    #       environment:
    #         os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
    #         kernel: "{{ ansible_kernel }}"
    #         python: "{{ ansible_python_version }}"
    #       git:
    #         branch: "{{ lookup('pipe', 'git rev-parse --abbrev-ref HEAD') }}"
    #         commit: "{{ lookup('pipe', 'git rev-parse HEAD') }}"
    #         status: "{{ lookup('pipe', 'git status --porcelain') | default('clean', true) }}"
    #       logs: "{{ service_logs.results }}"
    #       processes: "{{ process_info.results }}"

    # # ..........................................................................................
    # - name: Format Gist content
    #   set_fact:
    #     gist_content: |
    #       # Monitoring Stack Status Report
    #       **Run Date:** {{ status_data.timestamp }}

    #       ## Environment
    #       - OS: {{ status_data.environment.os }}
    #       - Kernel: {{ status_data.environment.kernel }}
    #       - Python: {{ status_data.environment.python }}

    #       ## Git Status
    #       - Branch: {{ status_data.git.branch }}
    #       - Commit: {{ status_data.git.commit }}
    #       - Working Tree: {{ 'Clean' if status_data.git.status == 'clean' else 'Modified' }}

    #       ## Service Status
    #       | Service  | Status | Port | Listening |
    #       |----------|--------|------|-----------|
    #       {% for name, svc in status_data.services.items() %}
    #       | {{ name | capitalize }} | {{ svc.state }} | {{ svc.port | default('-') }} | {{ 'Yes' if svc.state == 'running' and svc.port else 'N/A' }} |
    #       {% endfor %}

    #       ## Data Ingestion
    #       ### InfluxDB Metrics
    #       ```
    #       {{ status_data.data_ingestion.influxdb | trim | indent(2) }}
    #       ```

    #       ### Loki Logs
    #       ```
    #       {{ status_data.data_ingestion.loki | trim | indent(2) }}
    #       ```

    #       ## Service Logs
    #       {% for item in status_data.logs %}
    #       ### {{ item.item | upper }}
    #       {% for line in (item.stdout_lines[-5:] | default([])) %}
    #       - {{ line }}
    #       {% endfor %}

    #       {% endfor %}

    # # .......................................................................................
    # - name: Format Wiki content
    #   set_fact:
    #     wiki_content: |
    #       # Test Results: {{ status_data.timestamp }}

    #       ## Environment
    #       - **OS:** {{ status_data.environment.os }}
    #       - **Kernel:** {{ status_data.environment.kernel }}

    #       ## Status Summary
    #       {% for name, svc in status_data.services.items() %}
    #       - {{ name | capitalize }}: {{ svc.state }}{{ ' (Port ' + svc.port|string + ')' if svc.port }}
    #       {% endfor %}

    #       ## Data Collection
    #       - **InfluxDB:** {{ 'Receiving data' if status_data.data_ingestion.influxdb != 'No data' else 'No data received' }}
    #       - **Loki:** {{ 'Receiving data' if status_data.data_ingestion.loki != 'No data' else 'No data received' }}

    #       ## Service Logs

    #       {% for item in status_data.logs %}
    #       <details>
    #       <summary><b>{{ item.item | upper }} Logs</b></summary>

    #       ```
    #       {{ item.stdout | trim }}
    #       ```
    #       </details>

    #       {% endfor %}

    #       ## Process Information

    #       {% for proc in status_data.processes %}
    #       <details>
    #       <summary><b>{{ proc.item | upper }} Processes</b></summary>

    #       ```
    #       {{ proc.stdout | trim }}
    #       ```
    #       </details>

    #       {% endfor %}

    # # ..........................................................................................
    # # Gist creation task
    # - name: Create or update Gist
    #   uri:
    #     url: "https://api.github.com/gists"
    #     method: "POST"
    #     body_format: json
    #     headers:
    #       Authorization: "Bearer {{ lookup('env', 'GIST_TOKEN') }}"
    #       Accept: "application/vnd.github.v3+json"
    #     body:
    #       description: "Monitoring Stack Status Report"
    #       public: true
    #       files:
    #         "status.md":
    #           content: "{{ gist_content }}"
    #     status_code: [200, 201]
    #   register: gist_result
    #   delegate_to: localhost
    #   when: lookup('env', 'GIST_TOKEN') != ""

    # # ..........................................................................................
    # - name: Update Wiki
    #   block:
    #     - name: Write wiki content
    #       copy:
    #         content: "{{ wiki_content }}"
    #         dest: "{{ lookup('env', 'GITHUB_WORKSPACE') }}/wiki/Test-Results.md"
    #         mode: "0644"
    #       delegate_to: localhost
    #       become: false

    #     - name: Push wiki changes
    #       shell: |
    #         cd "{{ lookup('env', 'GITHUB_WORKSPACE') }}/wiki"
    #         git add Test-Results.md
    #         git commit -m "Update test results"
    #         git push origin master
    #       delegate_to: localhost
    #       become: false
    #       environment:
    #         GIT_AUTHOR_NAME: "github-actions[bot]"
    #         GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"

    # ..........................................................................................
    # - name: Update Wiki with retry
    #   when: lookup('env', 'GITHUB_REF') == 'refs/heads/main'
    #   block:
    #     - name: Ensure wiki directory exists
    #       file:
    #         path: "{{ lookup('env', 'GITHUB_WORKSPACE') }}/main/.wiki"
    #         state: directory
    #         mode: "0755"
    #       delegate_to: localhost
    #       become: false

    #     - name: Configure Git
    #       shell: |
    #         cd {{ lookup('env', 'GITHUB_WORKSPACE') }}/main/.wiki
    #         git config user.name "github-actions[bot]"
    #         git config user.email "github-actions[bot]@users.noreply.github.com"
    #       delegate_to: localhost
    #       become: false

    #     - name: Update wiki with retries
    #       shell: |
    #         cd {{ lookup('env', 'GITHUB_WORKSPACE') }}/main/.wiki

    #         # Maximum number of retries
    #         max_attempts=5
    #         attempt=1

    #         while [ $attempt -le $max_attempts ]; do
    #           echo "Attempt $attempt of $max_attempts"

    #           # Fetch latest changes
    #           git fetch origin

    #           # Reset to origin/master
    #           git reset --hard origin/master

    #           # Write new content
    #           cat > Test-Results.md << 'EOL'
    #           {{ wiki_content }}
    #           EOL

    #           # Stage and commit
    #           git add Test-Results.md
    #           git commit -m "Update test results from CI run"

    #           # Try to push
    #           if git push origin master; then
    #             echo "Successfully updated wiki on attempt $attempt"
    #             exit 0
    #           fi

    #           # If push failed, wait before retry
    #           sleep $((attempt * 2))
    #           attempt=$((attempt + 1))
    #         done

    #         # If we get here, all attempts failed
    #         echo "Failed to update wiki after $max_attempts attempts"
    #         exit 1
    #       delegate_to: localhost
    #       become: false
    #       environment:
    #         GIT_AUTHOR_NAME: "github-actions[bot]"
    #         GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
    #         GIT_COMMITTER_NAME: "github-actions[bot]"
    #         GIT_COMMITTER_EMAIL: "github-actions[bot]@users.noreply.github.com"
    #       register: wiki_update

    #   rescue:
    #     - name: Report wiki update failure
    #       debug:
    #         msg: |
    #           Failed to update wiki after multiple attempts.
    #           Error: {{ wiki_update.stderr if wiki_update.stderr is defined else 'Unknown error' }}

    #     - name: Log failure details
    #       copy:
    #         content: |
    #           === Wiki Update Failure ===
    #           Time: {{ ansible_date_time.iso8601 }}
    #           Error: {{ wiki_update.stderr if wiki_update.stderr is defined else 'Unknown error' }}
    #           Output: {{ wiki_update.stdout if wiki_update.stdout is defined else 'No output' }}
    #         dest: "{{ report_root }}/{{ ansible_distribution | lower }}/wiki_update_failure.log"
    #         mode: "0644"
    #       delegate_to: localhost

    #     - name: Set wiki update status in environment
    #       set_fact:
    #         wiki_update_failed: true

    # ..........................................................................................
    # ..........................................................................................
    # - name: Update Wiki
    #   block:
    #     - name: Write wiki content
    #       copy:
    #         content: "{{ wiki_content }}"
    #         dest: "{{ lookup('env', 'GITHUB_WORKSPACE') }}/main/.wiki/Test-Results.md"
    #         mode: "0644"
    #       delegate_to: localhost
    #       become: false
    #       when: lookup('env', 'GITHUB_WORKSPACE') != ""

    #     - name: Configure and push wiki changes
    #       shell: |
    #         cd {{ lookup('env', 'GITHUB_WORKSPACE') }}/main/.wiki
    #         git add Test-Results.md
    #         git commit -m "Update test results from CI run"
    #         git push origin master
    #       delegate_to: localhost
    #       become: false
    #       environment:
    #         GIT_AUTHOR_NAME: "github-actions[bot]"
    #         GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
    #         GIT_COMMITTER_NAME: "github-actions[bot]"
    #         GIT_COMMITTER_EMAIL: "github-actions[bot]@users.noreply.github.com"
    #       when: lookup('env', 'GITHUB_WORKSPACE') != ""
    #   when: lookup('env', 'GITHUB_WORKSPACE') != ""
